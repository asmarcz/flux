use crate::ast::*;
use std::str::FromStr;

grammar();

pub FnDecl: FnDecl<'input> = {
    <lo:@L> "fn" "(" <args:Args> ")" <output:("->" <Ty>)?> <hi:@R> => {
        let output = output.unwrap_or_else(|| Ty { kind: TyKind::Base(BaseTy::Unit), span: hi..hi });
        FnDecl {
            args,
            output: Box::new(output),
            span: lo..hi
        }
    },
}

Ty: Ty<'input> = <lo:@L> <kind:TyKind> <hi:@R> => Ty { kind, span: lo..hi } ;

TyKind: TyKind<'input> = {
    <BaseTy>                                          => TyKind::Base(<>),
    "{" <(<Ident> ":")?> <BaseTy> "|" <Predicate> "}" => TyKind::Refined(<>),
    "(" <Comma<Binding<Ident, Ty>>> ")"               => TyKind::Tuple(<>),
}

Args: Vec<(Ident<'input>, Ty<'input>)> = {
    <mut args:(<Arg> ",")*> <arg:Arg?> => match arg {
        None => args,
        Some(arg) => {
            args.push(arg);
            args
        }
    }
}

Arg: (Ident<'input>, Ty<'input>) = <Ident> ":" <Ty> => (<>);

Predicate = BinOpLevel<BinOpKind1, BinaryOp2>;
BinaryOp2 = BinOpLevel<BinOpKind2, BinaryOp3>;
BinaryOp3 = BinOpLevel<BinOpKind3, BinaryOp4>;
BinaryOp4 = BinOpLevel<BinOpKind4, UnaryOp>;

BinOpLevel<OpKind, NextLevel>: Predicate<'input> = {
    <lo:@L> <op1:BinOpLevel<OpKind, NextLevel>> <bin_op:BinOp<OpKind>> <op2:NextLevel> <hi:@R> => {
        Predicate {
            kind: PredicateKind::BinaryOp(
                bin_op,
                Box::new(op1),
                Box::new(op2)
            ),
            span: lo..hi,
        }
    },
    NextLevel
}

BinOp<T>: BinOp = <lo:@L> <kind:T> <hi:@R> => BinOp { kind, span: lo..hi} ;

BinOpKind1: BinOpKind = {
    "||" => BinOpKind::Or,
}

BinOpKind2: BinOpKind = {
    "&&" => BinOpKind::And,
}

BinOpKind3: BinOpKind = {
    "==" => BinOpKind::Eq,
    "!=" => BinOpKind::Neq,
    ">" => BinOpKind::Gt,
    "<" => BinOpKind::Lt,
    ">=" => BinOpKind::Ge,
    "<=" => BinOpKind::Le,
}

BinOpKind4: BinOpKind = {
    "+" => BinOpKind::Add,
    "-" => BinOpKind::Sub,
}

UnaryOp: Predicate<'input> = {
    <un_op:UnOp> <op:BasePredicate> => {
        let span = un_op.span.start..op.span.end;
        Predicate {
            kind: PredicateKind::UnaryOp(un_op, Box::new(op)),
            span,
        }
    },
    <BasePredicate>,
}

UnOp: UnOp = {
    <lo:@L> <kind:UnOpKind> <hi:@R> => {
        UnOp { kind, span: lo..hi }
    },
}

UnOpKind: UnOpKind = {
    "!" => UnOpKind::Not,
    "-" => UnOpKind::Neg,
}

BasePredicate: Predicate<'input> = {
    <lo:@L> <kind:PredicateKind> <hi:@R> => {
        Predicate { kind, span: lo..hi }
    },
}

PredicateKind: PredicateKind<'input> = {
    <Constant>      => PredicateKind::Lit(<>),
    <Ident> <Proj*> => PredicateKind::Place(<>),
    "(" <PredicateKind> ")"
}

Proj: usize = {
    "." <r"[0-9]+"> => usize::from_str(<>).unwrap()
}

Ident: Ident<'input> = {
    <lo:@L> <symbol:r"[a-z][a-zA-Z0-9_]*"> <hi:@R> => Ident { symbol, span: lo..hi } ,
}

Constant: Constant = {
    "true"    => Constant::Bool(true),
    "false"   => Constant::Bool(false),
    r"[0-9]+" => Constant::Int(u128::from_str(<>).unwrap()),
    "(" ")"   => Constant::Unit
}

BaseTy: BaseTy = {
    "int"   => BaseTy::Int,
    "bool"  => BaseTy::Bool,
    "(" ")" => BaseTy::Unit
}

Sep<S, T>: Vec<T> = {
    <v:(<T> S)+> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}
Binding<Name, T> = <Name> ":" <T>;
Comma<T> = Sep<",", T>;