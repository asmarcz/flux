use crate::{ast::{self, Span}, lexer::{LexerError, Token}};

use liquid_rust_mir::ty;

grammar<'source>(source: &'source str);

pub Ty: ast::Ty<'source> = {
    <spanned:Spanned<TyKind>> => {
        ast::Ty { kind: spanned.0, span: spanned.1 }
    },
}

TyKind: ast::TyKind<'source> = {
    <BaseTy> => ast::TyKind::Base(<>),
    "{" <Ident> ":" <BaseTy> "|" <Predicate> "}" => ast::TyKind::Refined(<>),
    "fn" "(" <args:Args> ")" "->" <ret_ty:Ty> => {
        ast::TyKind::Func(args, Box::new(ret_ty))
    },
    "fn" "(" <args:Args> <spanned:Spanned<")">>  => {
        let end = spanned.1.end;
        let ret_ty = ast::Ty {
            kind: ast::TyKind::Base(ty::BaseTy::Unit),
            span: end..end,
        };
        ast::TyKind::Func(args, Box::new(ret_ty))
    },
}

Args: Vec<(ast::Ident<'source>, ast::Ty<'source>)> = {
    <mut args:(<Arg> ",")*> <arg:Arg?> => match arg {
        None => args,
        Some(arg) => {
            args.push(arg);
            args
        }
    }
};

Arg: (ast::Ident<'source>, ast::Ty<'source>) = {
    <Ident> ":" <Ty> => (<>),
}

Predicate = Tier<BinOpKind1, BinaryOp2>;
BinaryOp2 = Tier<BinOpKind2, BinaryOp3>;
BinaryOp3 = Tier<BinOpKind3, BinaryOp4>;
BinaryOp4 = Tier<BinOpKind4, BinaryOp5>;
BinaryOp5 = Tier<BinOpKind5, UnaryOp>;

Tier<OpKind, NextTier>: ast::Predicate<'source> = {
    <op1:Tier<OpKind, NextTier>> <bin_op:Spanned<OpKind>> <op2:NextTier> => {
        let bin_op = ast::BinOp { kind: bin_op.0, span: bin_op.1 };
        let span = op1.span.start..op2.span.end;

        ast::Predicate {
            kind: ast::PredicateKind::BinaryOp(
                bin_op,
                Box::new(op1),
                Box::new(op2)
            ),
            span,
        }
    },
    NextTier
}

BinOpKind1: ast::BinOpKind = {
    "||" => ast::BinOpKind::Or,
}

BinOpKind2: ast::BinOpKind = {
    "&&" => ast::BinOpKind::And,
}

BinOpKind3: ast::BinOpKind = {
    "==" => ast::BinOpKind::Eq,
    "!=" => ast::BinOpKind::Neq,
    ">" => ast::BinOpKind::Gt,
    "<" => ast::BinOpKind::Lt,
    ">=" => ast::BinOpKind::Gte,
    "<=" => ast::BinOpKind::Lte,
}

BinOpKind4: ast::BinOpKind = {
    "+" => ast::BinOpKind::Add,
    "-" => ast::BinOpKind::Sub,
}

BinOpKind5: ast::BinOpKind = {
    "*" => ast::BinOpKind::Mul,
    "/" => ast::BinOpKind::Div,
    "%" => ast::BinOpKind::Rem,
}

UnaryOp: ast::Predicate<'source> = {
    <un_op:UnOp> <op:BasePredicate> => {
        let span = un_op.span.start..op.span.end;
        ast::Predicate {
            kind: ast::PredicateKind::UnaryOp(un_op, Box::new(op)),
            span,
        }
    },
    <BasePredicate>,
}

UnOp: ast::UnOp = {
    <spanned:Spanned<UnOpKind>> => {
        ast::UnOp { kind: spanned.0, span: spanned.1 }
    },
}

UnOpKind: ast::UnOpKind = {
    "!" => ast::UnOpKind::Not,
    "-" => ast::UnOpKind::Neg,
}

BasePredicate: ast::Predicate<'source> = {
    <spanned:Spanned<PredicateKind>> => {
        ast::Predicate { kind: spanned.0, span: spanned.1 }
    },
}

PredicateKind: ast::PredicateKind<'source> = {
    <Literal> => ast::PredicateKind::Lit(<>),
    <Ident> => ast::PredicateKind::Var(<>),
    "(" <PredicateKind> ")"
}

Ident: ast::Ident<'source> = {
    <spanned:Spanned<"ident">> => {
        ast::Ident { symbol: spanned.0, span: spanned.1 }
    },
}

Literal: ty::Literal = {
    "(" ")" => ().into(),
    "true" => true.into(),
    "false" => false.into(),
    "int8" => <>.into(),
    "int16" => <>.into(),
    "int32" => <>.into(),
    "int64" => <>.into(),
    "int128" =><>.into(),
    "intsize" => <>.into(),
    "uint8" => <>.into(),
    "uint16" => <>.into(),
    "uint32" => <>.into(),
    "uint64" => <>.into(),
    "uint128" => <>.into(),
    "uintsize" => <>.into(),
}

BaseTy: ty::BaseTy = {
    "(" ")" => ty::BaseTy::Unit,
    "bool" => ty::BaseTy::Bool,
    "u8" => ty::BaseTy::Int(ty::IntSign::Unsigned, ty::IntSize::Size8),
    "u16" => ty::BaseTy::Int(ty::IntSign::Unsigned, ty::IntSize::Size16),
    "u32" => ty::BaseTy::Int(ty::IntSign::Unsigned, ty::IntSize::Size32),
    "u64" => ty::BaseTy::Int(ty::IntSign::Unsigned, ty::IntSize::Size64),
    "u128" => ty::BaseTy::Int(ty::IntSign::Unsigned, ty::IntSize::Size128),
    "usize" => ty::BaseTy::Int(ty::IntSign::Unsigned, ty::IntSize::SizePtr),
    "i8" => ty::BaseTy::Int(ty::IntSign::Signed, ty::IntSize::Size8),
    "i16" => ty::BaseTy::Int(ty::IntSign::Signed, ty::IntSize::Size16),
    "i32" => ty::BaseTy::Int(ty::IntSign::Signed, ty::IntSize::Size32),
    "i64" => ty::BaseTy::Int(ty::IntSign::Signed, ty::IntSize::Size64),
    "i128" => ty::BaseTy::Int(ty::IntSign::Signed, ty::IntSize::Size128),
    "isize" => ty::BaseTy::Int(ty::IntSign::Signed, ty::IntSize::SizePtr),
};

Spanned<T>: (T, Span) = {
    <start:@L> <term:T> <end:@R> => (term, start..end),
}

extern {
    type Location = usize;
    type Error = LexerError;

    enum Token<'source> {
        "bool" => Token::Bool,
        "u8" => Token::U8,
        "u16" => Token::U16,
        "u32" => Token::U32,
        "u64" => Token::U64,
        "u128" => Token::U128,
        "usize" => Token::Usize,
        "i8" => Token::I8,
        "i16" => Token::I16,
        "i32" => Token::I32,
        "i64" => Token::I64,
        "i128" => Token::I128,
        "isize" => Token::Isize,
        "true" => Token::True,
        "false" => Token::False,
        "int8" => Token::Int8(<i8>),
        "int16" => Token::Int16(<i16>),
        "int32" => Token::Int32(<i32>),
        "int64" => Token::Int64(<i64>),
        "int128" => Token::Int128(<i128>),
        "intsize" => Token::IntSize(<isize>),
        "uint8" => Token::Uint8(<u8>),
        "uint16" => Token::Uint16(<u16>),
        "uint32" => Token::Uint32(<u32>),
        "uint64" => Token::Uint64(<u64>),
        "uint128" => Token::Uint128(<u128>),
        "uintsize" => Token::UintSize(<usize>),
        "ident" => Token::Ident(<&'source str>),
        "fn" => Token::Fn,
        "+" => Token::Add,
        "-" => Token::Sub,
        "*" => Token::Mul,
        "/" => Token::Div,
        "%" => Token::Rem,
        "&&" => Token::And,
        "||" => Token::Or,
        "!" => Token::Not,
        "==" => Token::Eq,
        "!=" => Token::Neq,
        ">" => Token::Gt,
        "<" => Token::Lt,
        ">=" => Token::Gte,
        "<=" => Token::Lte,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
        "{" => Token::OpenBracket,
        "}" => Token::CloseBracket,
        "|" => Token::Pipe,
        ":" => Token::Colon,
        "," => Token::Comma,
        "->" => Token::Arrow,
    }
}
